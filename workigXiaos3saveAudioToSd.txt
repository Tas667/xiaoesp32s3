#include <ESP_I2S.h>    // I2S library for reading PDM mic
#include "FS.h"         // Filesystem (for SD card)
#include "SD.h"         // SD card library
#include "SPI.h"        // SPI library
#include "BLEDevice.h"  // BLE library
#include "BLE2902.h"    // BLE descriptor for notifications

// Define BLE service and characteristic UUIDs
#define SERVICE_UUID        "0000FFF0-0000-1000-8000-00805F9B34FB"
#define CHARACTERISTIC_UUID "0000FFF1-0000-1000-8000-00805F9B34FB"

// Configuration constants
#define I2S_WS 42        // PDM clock
#define I2S_SD 41        // PDM data
#define SAMPLE_RATE 16000U
#define SAMPLE_BITS 16
#define RECORD_TIME 10   // Record time in seconds
#define WAV_FILE_NAME "/recording.wav"
#define WAV_HEADER_SIZE 44
#define BUFFER_SIZE 1024  // Buffer size for audio samples (in bytes)
#define BLE_CHUNK_SIZE 20  // Max BLE chunk size (20 bytes for notifications)

I2SClass I2S;
BLEServer* pServer;
BLEService* pService;
BLECharacteristic* pCharacteristic;
File audioFile;
bool deviceConnected = false;  // To track BLE connection

// Callback to handle BLE connection and disconnection
class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
    Serial.println("BLE Device Connected.");
  }

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    Serial.println("BLE Device Disconnected.");
  }
};

void setup() {
  Serial.begin(115200);
  while (!Serial);  // Wait for serial connection

  // Setup I2S for PDM microphone
  I2S.setPinsPdmRx(I2S_WS, I2S_SD); // Set pins for PDM mode
  if (!I2S.begin(I2S_MODE_PDM_RX, SAMPLE_RATE, I2S_DATA_BIT_WIDTH_16BIT, I2S_SLOT_MODE_MONO)) {
    Serial.println("Failed to initialize I2S!");
    while (1);  // Stop if initialization fails
  }

  // Initialize SD card
  if (!SD.begin(21)) {
    Serial.println("Failed to mount SD Card!");
    while (1);
  }

  // Setup BLE
  BLEDevice::init("XIAO_S3_SENSE");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
  // Add BLE descriptor for notifications
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->start();

  Serial.println("Waiting for BLE connection...");
}

void loop() {
  // Start recording and BLE sending when connected
  if (deviceConnected) {
    Serial.println("BLE Device connected, starting recording...");
    record_wav();  // Start recording to WAV file
    send_file_over_ble();  // Send the file after recording
    delay(1000);  // Add delay to avoid overwhelming the BLE connection
  }
}

void record_wav() {
  uint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;
  uint8_t rec_buffer[BUFFER_SIZE];  // Buffer to hold audio samples
  size_t bytes_written = 0;
  uint32_t total_bytes_written = 0;
  
  // Open the WAV file on the SD card
  audioFile = SD.open(WAV_FILE_NAME, FILE_WRITE);
  if (!audioFile) {
    Serial.println("Failed to open file for writing.");
    return;
  }
  
  // Write the WAV header to the file
  uint8_t wav_header[WAV_HEADER_SIZE];
  generate_wav_header(wav_header, record_size, SAMPLE_RATE);
  audioFile.write(wav_header, WAV_HEADER_SIZE);

  // Start recording in chunks
  unsigned long startMillis = millis();
  int buffer_index = 0;
  
  while ((millis() - startMillis) < (RECORD_TIME * 1000)) {
    // Read a single audio sample from the PDM microphone
    int16_t sample = I2S.read();  // Read one sample
    
    if (sample != -1 && sample != 1) {  // Check if valid sample
      // Store the sample in the buffer
      rec_buffer[buffer_index++] = sample & 0xFF;           // Low byte
      rec_buffer[buffer_index++] = (sample >> 8) & 0xFF;    // High byte
      
      // If buffer is full, write to SD card
      if (buffer_index >= BUFFER_SIZE) {
        audioFile.write(rec_buffer, BUFFER_SIZE);
        total_bytes_written += BUFFER_SIZE;
        buffer_index = 0;  // Reset buffer index
      }
    }
  }

  // Write any remaining data in the buffer
  if (buffer_index > 0) {
    audioFile.write(rec_buffer, buffer_index);
    total_bytes_written += buffer_index;
  }

  // Update the WAV header with the actual data size
  update_wav_header(audioFile, total_bytes_written);
  audioFile.close();
  Serial.printf("Recording finished. Total bytes written: %d\n", total_bytes_written);
}

void send_file_over_ble() {
  // Reopen the file for reading
  audioFile = SD.open(WAV_FILE_NAME, FILE_READ);
  
  if (!audioFile) {
    Serial.println("Failed to open file for reading.");
    return;
  }

  uint8_t buffer[BUFFER_SIZE];
  while (audioFile.available()) {
    int bytesRead = audioFile.read(buffer, BUFFER_SIZE);
    int bytesSent = 0;

    // Send data in BLE_CHUNK_SIZE chunks
    while (bytesSent < bytesRead) {
      int chunkSize = min(BLE_CHUNK_SIZE, bytesRead - bytesSent);
      pCharacteristic->setValue(&buffer[bytesSent], chunkSize);
      pCharacteristic->notify();  // Send the buffer over BLE
      bytesSent += chunkSize;
      delay(10);  // Small delay to prevent overwhelming the BLE connection
    }
  }

  audioFile.close();
  Serial.println("File sent over BLE.");
}

void generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate) {
  uint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;
  uint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;
  const uint8_t set_wav_header[] = {
    'R', 'I', 'F', 'F',                   // ChunkID
    (uint8_t)(file_size & 0xff),           // ChunkSize (4 bytes)
    (uint8_t)((file_size >> 8) & 0xff),
    (uint8_t)((file_size >> 16) & 0xff),
    (uint8_t)((file_size >> 24) & 0xff),
    'W', 'A', 'V', 'E',                   // Format
    'f', 'm', 't', ' ',                   // Subchunk1ID
    0x10, 0x00, 0x00, 0x00,               // Subchunk1Size (16 for PCM)
    0x01, 0x00,                           // AudioFormat (1 for PCM)
    0x01, 0x00,                           // NumChannels (1 channel)
    (uint8_t)(sample_rate & 0xff),         // SampleRate (4 bytes)
    (uint8_t)((sample_rate >> 8) & 0xff),
    (uint8_t)((sample_rate >> 16) & 0xff),
    (uint8_t)((sample_rate >> 24) & 0xff),
    (uint8_t)(byte_rate & 0xff),           // ByteRate (4 bytes)
    (uint8_t)((byte_rate >> 8) & 0xff),
    (uint8_t)((byte_rate >> 16) & 0xff),
    (uint8_t)((byte_rate >> 24) & 0xff),
    0x02, 0x00,                           // BlockAlign
    0x10, 0x00,                           // BitsPerSample (16 bits)
    'd', 'a', 't', 'a',                   // Subchunk2ID
    (uint8_t)(wav_size & 0xff),            // Subchunk2Size (4 bytes)
    (uint8_t)((wav_size >> 8) & 0xff),
    (uint8_t)((wav_size >> 16) & 0xff),
    (uint8_t)((wav_size >> 24) & 0xff),
  };
  memcpy(wav_header, set_wav_header, sizeof(set_wav_header));
}

void update_wav_header(File &file, uint32_t total_bytes_written) {
  // Update file size and data chunk size in the WAV header
  file.seek(4); // Move to ChunkSize position
  uint32_t file_size = total_bytes_written + WAV_HEADER_SIZE - 8;
  file.write((uint8_t *)&file_size, 4);
  
  file.seek(40); // Move to Subchunk2Size position
  file.write((uint8_t *)&total_bytes_written, 4);
}
